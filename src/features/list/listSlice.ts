import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchBusinesses } from './listAPI';
import { BusinessProps, mockData } from './listConsts';

export interface CounterState {
  value: BusinessProps[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  value: mockData,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAsync = createAsyncThunk(
  'lsit/fetchBusinesses',
  async (url: string) => {
    const response = await fetchBusinesses(url);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const listSlice = createSlice({
  name: 'list',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateData: (state, action: PayloadAction<BusinessProps[]>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      });
  },
});

export const { updateData } = listSlice.actions;


export default listSlice.reducer;
